local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

repeat wait() until game:IsLoaded() -- Wait until the game is fully loaded
repeat wait() until game.Players.LocalPlayer.Character -- Wait until the player character is fully loaded


local Window = Fluent:CreateWindow({
    Title = "Arsenal Script",
    SubTitle = "by HackManHub",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main" }),
    ESP = Window:AddTab({ Title = "ESP" }),
    Misc = Window:AddTab({ Title = "Misc" }),
    Settings = Window:AddTab({ Title = "Settings" })
}

local Options = Fluent.Options

local AimbotToggle = Tabs.Main:AddToggle("AimbotToggle", {
    Title = "Enable/Disable Aimbot",
    Default = false
})

local TeamCheckToggle = Tabs.Main:AddToggle("TeamCheck", {
    Title = "Team Check",
    Default = true
})

local AimbotKeybind = Tabs.Main:AddKeybind("AimbotKey", {
    Title = "Aimbot Hotkey",
    Default = "E",
    Mode = "Toggle"
})

local InfiniteJumpToggle = Tabs.Misc:AddToggle("InfiniteJump", {
    Title = "Enable/Disable Infinite Jump",
    Default = false
})

local FlyButton = Tabs.Misc:AddButton({
    Title = "Activate Fly",
    Callback = function()
        print("Fly Activated")
    end
})

local ESPEnableButton = Tabs.ESP:AddButton({
    Title = "Enable ESP",
    Callback = function()
        _G.WRDESPEnabled = true
        _G.WRDESPBoxes = true
    end
})

local ESPDisableButton = Tabs.ESP:AddButton({
    Title = "Disable ESP",
    Callback = function()
        _G.WRDESPEnabled = false
        _G.WRDESPBoxes = false
    end
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = game.Workspace.CurrentCamera
local AimbotTarget = nil

local function GetBestTarget()
    local ClosestPlayer = nil
    local MinDistance = math.huge
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            if Options.TeamCheck.Value and player.Team == LocalPlayer.Team then
                continue
            end
            local HeadPosition, OnScreen = Camera:WorldToViewportPoint(player.Character.Head.Position)
            if OnScreen then
                local Distance = (Vector2.new(HeadPosition.X, HeadPosition.Y) - Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)).Magnitude
                if Distance < MinDistance then
                    MinDistance = Distance
                    ClosestPlayer = player.Character.Head
                end
            end
        end
    end
    return ClosestPlayer
end

AimbotKeybind:OnClick(function()
    if AimbotTarget then
        AimbotTarget = nil
        Fluent:Notify({
            Title = "Aimbot",
            Content = "Aimbot tracking disabled",
            Duration = 3
        })
    else
        if Options.AimbotToggle.Value then
            AimbotTarget = GetBestTarget()
            Fluent:Notify({
                Title = "Aimbot",
                Content = "Target locked",
                Duration = 3
            })
        else
            Fluent:Notify({
                Title = "Aimbot",
                Content = "Aimbot is disabled",
                Duration = 3
            })
        end
    end
end)

game:GetService("RunService").RenderStepped:Connect(function()
    if AimbotTarget and Options.AimbotToggle.Value then
        Camera.CFrame = CFrame.new(Camera.CFrame.Position, AimbotTarget.Position)
    end
end)

local UserInputService = game:GetService("UserInputService")
UserInputService.JumpRequest:Connect(function()
    if Options.InfiniteJump.Value then
        LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
    end
end)

Window:SelectTab(1)

Fluent:Notify({
    Title = "HackManHub Arsenal Script",
    Content = "ESP Enabled automaticly you can dislable it but ESP Auto Refreshes if esp lil bit buggy",
    Duration = 5
})

loadstring(game:HttpGet("https://cdn.wearedevs.net/scripts/WRD%20ESP.txt"))()
-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
